#include <GL/gl.h>
static const GLchar *shader_source_irradiance_frag_glsl = {
"#version 330 core\n"
"in vec3 fragPos;\n"
"out vec4 fragColor;\n"
"uniform samplerCube uMap;\n"
"uniform float uNbSamples;\n"
"const float PI = 3.14159265359;\n"
"const float TWO_PI = 2.0 * PI;\n"
"const float PI_4 = 0.5 * PI;\n"
"void main() {\n"
"    vec3 irradiance = vec3(0.0);\n"
"    vec3 normal = normalize(fragPos);\n"
"    vec3 up = vec3(0.0, 1.0, 0.0);\n"
"    vec3 right = cross(up, normal);\n"
"    up = cross(normal, right);\n"
"    float sampleDelta = (TWO_PI) / uNbSamples;\n"
"    float nbSamples = 0.0;\n"
"    for(float phi = 0.0; phi < TWO_PI; phi += sampleDelta)\n"
"    {\n"
"        for(float theta = 0.0; theta < PI_4; theta += sampleDelta)\n"
"        {\n"
"            vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));\n"
"            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up\n"
"            + tangentSample.z * normal;\n"
"            irradiance += texture(uMap, sampleVec).rgb * cos(theta) * sin(theta);\n"
"            nbSamples++;\n"
"        }\n"
"    }\n"
"    irradiance = PI * irradiance * (1.0 / float(nbSamples));\n"
"    fragColor = vec4(irradiance, 1.0);\n"
"}\n"
};
